//솔루션 탐색기->모든 파일 표시로 변경
//프로젝트 우클릭->속성->중간 디렉터리 변경
//프로젝트 우클릭->속성->C++20

//솔루션(sln) 파일, 프로젝트(vcxproj) 파일 직접 notepad로 열어서 분석.
// - 프로젝트: xml이라는 문법으로 만들어져 있었다.
//솔루션 빌드: 솔루션 안의 모든 파일 빌드.

/*
빌드(Build)
실행 파일을 만드는 과정
1. 전처리(Preprocess): 소스코드에 담긴 메타 정보를 처리한다.
#include <iostream> -> include 전처리 지시자. 
이건 우리가 컴파일러에게 알려주는 기능
무엇을 알려주는냐? include뒤에 나오는 파일을 포함하겠다 라고 알려주는것.
포함이란 무엇인가? include 위치에 해당 파일을 복사 붙여넣기 한다.
#include <iostream> 이거 줄 마우스 오른쪽 클릭해서 문서로 이동 클릭해보셈.

2. 컴파일(Compile): 소스코드를 머신이 읽을 수 있는 파일로 변환한다. 
                    (기계어 0과 1 그리고 이 0,1을 사람이 읽기 편한 어셈블리어로 변환할 수 도 있다.)
3. 링크(Link): 컴파일 단계에서 변환한 여러 Object파일을 Application으로 합친다.
               (우리가 작성한 소스코드들 + 가져다 쓴 코드(라이브러리) 등을 합친다.)
*/

//* .pdb : 디버깅을 위한 정보가 들어있다.
//이건 실제 유저에게 배포할 때는 절대로 포함되면 안된다.

/*
컴파일러
컴파일러 제조사가 컴파일러를 표준 C++문법을 따라서 컴파일 되게 구현한 프로그램이다.
MSVC(MicroSoft Visual C, C++) 컴파일러
GCC
*/

// 전체 저장 ctrl shift s

//iostream: input output stream
//cout: cosole out. 콘솔창에 출력하겠다.
//std: 마우스올려보면 namespace std 라고 나올꺼임. 함수의 이름이 같더라도 std가 만든 cout을 쓰겠다. 이런뜻. 
//이름이 중복될 가능성이 크기 때문에 추가적인 구분을 위해 namespace통해 추가로 구분해줌
//std는 표준. 표준안에 구현되어 있는 cout을 사용한다! 

//프로그램은 한줄 한줄 한줄 실행. 어디서 시작할것인가. 콘솔_는 main함수를 시작으로.

/*
구획을 나누기 위해 pragma사용해줄꺼임. 주석과 다르게 특정 구간 접었다 폈다 구획 나눌 수 있음.

#pragma region 01.cout,cin
    std::cout << "Hello World!\n";
#pragma endregion
*/

//위에 로컬 windows디버거 버튼을 클릭해서 디버깅가능. (F5)
//이거 옆에 디버그하지않고 시작 (ctrl F5)

//디버그하기위해서 브레이크 포인트(Break Point)활용
//이건 F5로 실행(디버거를 붙혀서 실행)하는 경우 해당 위치에 도달하면 자동으로 멈춘다.
//원하는 라인에 캐럿(클릭하면 생기는 깜빡이는 수직선)을 두고 F9을 누르면 된다. 
//또는 원하는 라인 가장 왼쪽에 마우스 올리면 회색 원이 생기는데 이걸 클릭하면 된다.
//이후 F10눌러서 한 줄 씩 실행 가능.




#include <iostream>

int main()
{
#pragma region 01.cout,cin
    {
        //namespace:여러 단체, 기업에 코드를 작성.
        //이름이 중복될 가능성이 크기 때문에 추가적인 구분을 위해 namespace통해 추가로 구분해줌.
        //std라는 namespace를 사용했고, std안에 구현되어 있는 cout을 사용했다.
        std::cout << "Hello World!\n";
    }
    
#pragma endregion

}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
